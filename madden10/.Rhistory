bind_rows()
tr14_final <-Map(function(x,y)
filter(tr14, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
#2015
v1 <- unique(tr15$Position)
tr15_trim <-Map(function(x,y)
filter(tr15, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
#2 CB, 2 DT, 2HB, 2MLB, 2WR
bind_rows()
tr15_final <-Map(function(x,y)
filter(tr15, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
head(tr15_final)
head(tr14_final)
head(tr13_final)
head(tr12_final)
tr12_DF<-xtabs(Mean~Team+Position, tr12_final)
tr12_DF
head(tr12_DF)
tr13_DF<-xtabs(Mean~Team+Position, tr13_final)
tr14_DF<-xtabs(Mean~Team+Position, tr14_final)
tr15_DF<-xtabs(Mean~Team+Position, tr15_final)
head(Winpct15)
tr12DF<-xtabs(Mean~Team+Position, tr12_final)
tr13DF<-xtabs(Mean~Team+Position, tr13_final)
tr14DF<-xtabs(Mean~Team+Position, tr14_final)
tr15DF<-xtabs(Mean~Team+Position, tr15_final)
tr12merge<-merge(tr12DF, Winpct12)
head(tr12merge)
head(tr12DF)
cols(tr12DF)
colnames(tr12DF)
rownames(tr12DF)
reshape(dat1, idvar = "name", timevar = "numbers", direction = "wide")
library(reshape)
cast(tr15_final, Mean~Team)
head(tr15_final)
cast(tr15_final, Team~Mean)
cast(tr15_final, Team~Position)
tr15DF<-cast(tr15_final, Team~Position)
tr15DF[,"Team"=="Chargers"]
head(tr15DF$Team=="Chargers")
tr15DF["Team"=="Chargers",]
tr15DF[Team=="Chargers",]
colnames(tr15DF)
tr15DF[tr15DF$Team=="Chargers",]
tr15DF[tr15DF$Team=="Panthers",]
tr15DF[tr15DF$Team=="Cardinals",]
tr12merge<-merge(tr12DF, Winpct12)
head(tr12merge)
head(tr12DF)
tr12DF<-cast(tr12_final, Team~Position)
tr13DF<-cast(tr13_final, Team~Position)
tr14DF<-cast(tr14_final, Team~Position)
tr12merge<-merge(tr12DF, Winpct12)
head(tr12merge)
head(tr12DF)
tr12merge<-merge(Winpct12,tr12DF)
head(tr12merge)
tr12merge<-merge(Winpct12,tr12DF)
tr13merge<-merge(Winpct13,tr13DF)
tr14merge<-merge(Winpct14,tr14DF)
tr15merge<-merge(Winpct15,tr15DF)
head(tr14merge)
head(tr15merge)
tr12merge<-merge(Winpct12,tr12DF)
tr13merge<-merge(Winpct13,tr13DF)
tr14merge<-merge(Winpct14,tr14DF)
tr15merge<-merge(Winpct15,tr15DF)
trAll<-rbind(tr12merge, tr13merge, tr14merge, tr15merge)
head(trAll)
tail(trAll)
library(glmnet)
index<-sample(1:nrow(trAll), nrow(trAll)/3)
trAll_CV<-trAll[-index,]
trAll_test<-trAll[index,]
x <- model.matrix(Winpct~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=5, nlambda=20)
library(glmnet)
index<-sample(1:nrow(trAll), nrow(trAll)/3)
trAll_CV<-trAll[-index,]
trAll_test<-trAll[index,]
x <- model.matrix(Winpct~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=5, nlambda=20)
cv.lasso
cv.lasso$lambda.min
index<-sample(1:nrow(trAll), nrow(trAll)/3)
trAll_CV<-trAll[-index,]
trAll_test<-trAll[index,]
x <- model.matrix(Winpct~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=5)
cv.lasso
cv.lasso$lambda.min
coef(cv.lasso, s = "lambda.min")
index<-sample(1:nrow(trAll), nrow(trAll)/3)
trAll_CV<-trAll[-index,]
trAll_test<-trAll[index,]
x <- model.matrix(~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=5) #without specifying nlambda, it is 100 by default
#lambda.max is not given, but easily computed from the input x and y; it is the
#smallest value for lambda such that all the coefficients are zero
#value of lambda that gives minimum mean CV error
cv.lasso$lambda.min
coef(cv.lasso, s = "lambda.min")
index<-sample(1:nrow(trAll), nrow(trAll)/3)
trAll_CV<-trAll[-index,]
trAll_test<-trAll[index,]
x <- model.matrix(~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=10) #without specifying nlambda, it is 100 by default
#lambda.max is not given, but easily computed from the input x and y; it is the
#smallest value for lambda such that all the coefficients are zero
#value of lambda that gives minimum mean CV error
cv.lasso$lambda.min
coef(cv.lasso, s = "lambda.min")
index<-sample(1:nrow(trAll), nrow(trAll)/3)
trAll_CV<-trAll[-index,]
trAll_test<-trAll[index,]
x <- model.matrix(~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=10) #without specifying nlambda, it is 100 by default
#lambda.max is not given, but easily computed from the input x and y; it is the
#smallest value for lambda such that all the coefficients are zero
#value of lambda that gives minimum mean CV error
cv.lasso$lambda.min
coef(cv.lasso, s = "lambda.min")
trAll_CV<-trAll
x <- model.matrix(~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=5) #without specifying nlambda, it is 100 by default
#lambda.max is not given, but easily computed from the input x and y; it is the
#smallest value for lambda such that all the coefficients are zero
#value of lambda that gives minimum mean CV error
cv.lasso$lambda.min
coef(cv.lasso, s = "lambda.min")
nrow(trAll)
nrow(tr12merge)
nrow(tr12DF)
nrow(Winpct12)
nrow(season12)
nrow(standings12)
head(season12)
1season12 <- html_table(standings12)[[2]]
1season12 <- html_table(standings12)[[1]]
s12 <- html_table(standings12)[[1]]
s12 <- html_table(standings12)[[2]]
head(s12)
tail(s12)
season12a <- html_table(standings12)[[1]]
season12b <- html_table(standings12)[[2]]
season12<-rbind(season12a, season12b)
head(season12)
tail(season12)
nrow(season12)
train12<-fread("madden13.csv",data.table=FALSE)
train13<-fread("madden14.csv",data.table=FALSE)
train14<-fread("madden15.csv",data.table=FALSE)
train15<-fread("madden16.csv",data.table=FALSE)
tr12<-train12[,c("Team","First Name","Last Name", "Position", "Overall")]
tr13<-train13[,c("Team","First Name","Last Name", "Position", "Overall")]
tr14<-train14[,c("Team","First Name","Last Name", "Position", "Overall")]
tr15<-train15[,c("Team","First Name","Last Name", "Position", "OVR")]
colnames(tr12)<-c("Team","FirstName","LastName", "Position", "Overall")
colnames(tr13)<-c("Team","FirstName","LastName", "Position", "Overall")
colnames(tr14)<-c("Team","FirstName","LastName", "Position", "Overall")
colnames(tr15)<-c("Team","FirstName","LastName", "Position", "Overall")
#use web scraping to get Win% for each team from ESPN
url12 <- 'http://www.espn.com/nfl/standings/_/season/2012'
webpage <- read_html(url12)
standings12 <- html_nodes(webpage, 'table')
season12a <- html_table(standings12)[[1]]
season12b <- html_table(standings12)[[2]]
season12<-rbind(season12a, season12b)
Winpct12 <- season12[,c("X1","X5")]
colnames(Winpct12) <- c("Team", "Winpct")
Winpct12$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct12$Team)
url13 <- 'http://www.espn.com/nfl/standings/_/season/2013'
webpage <- read_html(url13)
standings13 <- html_nodes(webpage, 'table')
season13a <- html_table(standings13)[[1]]
season13b <- html_table(standings13)[[2]]
season13<-rbind(season13a, season13b)
Winpct13 <- season13[,c("X1","X5")]
colnames(Winpct13) <- c("Team", "Winpct")
Winpct13$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct13$Team)
url14 <- 'http://www.espn.com/nfl/standings/_/season/2014'
webpage <- read_html(url14)
standings14 <- html_nodes(webpage, 'table')
season14a <- html_table(standings14)[[1]]
season14b <- html_table(standings14)[[2]]
season14<-rbind(season14a, season14b)
Winpct14 <- season14[,c("X1","X5")]
colnames(Winpct14) <- c("Team", "Winpct")
Winpct14$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct14$Team)
url15 <- 'http://www.espn.com/nfl/standings/_/season/2015'
webpage <- read_html(url15)
standings15 <- html_nodes(webpage, 'table')
season15a <- html_table(standings15)[[1]]
season15b <- html_table(standings15)[[2]]
season15<-rbind(season15a, season15b)
Winpct15 <- season15[,c("X1","X5")]
colnames(Winpct15) <- c("Team", "Winpct")
Winpct15$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct15$Team)
#2012
v1 <- unique(tr12$Position)
tr12_trim <-Map(function(x,y)
filter(tr12, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows()
tr12_final <-Map(function(x,y)
filter(tr12, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr12DF<-cast(tr12_final, Team~Position)
#Bears 2012
Bears12<-subset(tr12, Team =="Bears")
Chargers12<-subset(tr12, Team =="Chargers")
#2013
v1 <- unique(tr13$Position)
tr13_trim <-Map(function(x,y)
filter(tr13, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows()
tr13_final <-Map(function(x,y)
filter(tr13, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr13DF<-cast(tr13_final, Team~Position)
#2014
v1 <- unique(tr14$Position)
tr14_trim <-Map(function(x,y)
filter(tr14, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows()
tr14_final <-Map(function(x,y)
filter(tr14, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr14DF<-cast(tr14_final, Team~Position)
#2015
v1 <- unique(tr15$Position)
tr15_trim <-Map(function(x,y)
filter(tr15, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
#2 CB, 2 DT, 2HB, 2MLB, 2WR
bind_rows()
tr15_final <-Map(function(x,y)
filter(tr15, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr15DF<-cast(tr15_final, Team~Position)
tr12merge<-merge(Winpct12,tr12DF)
tr13merge<-merge(Winpct13,tr13DF)
tr14merge<-merge(Winpct14,tr14DF)
tr15merge<-merge(Winpct15,tr15DF)
trAll<-rbind(tr12merge, tr13merge, tr14merge, tr15merge)
head(trAll)
tail(trAll)
nrow(tr12merge)
nrow(Winpct12)
nrow(tr12DF)
head(Winpct12)
head(tr12DF)
Winpct12
tr12DF
Winpct12$Team[Winpct12$Team =="Francisco"] <- "49ers"
Winpct12
head(tr12merge)
train12<-fread("madden13.csv",data.table=FALSE)
train13<-fread("madden14.csv",data.table=FALSE)
train14<-fread("madden15.csv",data.table=FALSE)
train15<-fread("madden16.csv",data.table=FALSE)
tr12<-train12[,c("Team","First Name","Last Name", "Position", "Overall")]
tr13<-train13[,c("Team","First Name","Last Name", "Position", "Overall")]
tr14<-train14[,c("Team","First Name","Last Name", "Position", "Overall")]
tr15<-train15[,c("Team","First Name","Last Name", "Position", "OVR")]
colnames(tr12)<-c("Team","FirstName","LastName", "Position", "Overall")
colnames(tr13)<-c("Team","FirstName","LastName", "Position", "Overall")
colnames(tr14)<-c("Team","FirstName","LastName", "Position", "Overall")
colnames(tr15)<-c("Team","FirstName","LastName", "Position", "Overall")
#use web scraping to get Win% for each team from ESPN
url12 <- 'http://www.espn.com/nfl/standings/_/season/2012'
webpage <- read_html(url12)
standings12 <- html_nodes(webpage, 'table')
season12a <- html_table(standings12)[[1]]
season12b <- html_table(standings12)[[2]]
season12<-rbind(season12a, season12b)
Winpct12 <- season12[,c("X1","X5")]
colnames(Winpct12) <- c("Team", "Winpct")
Winpct12$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct12$Team)
Winpct12$Team[Winpct12$Team =="Francisco"] <- "49ers"
url13 <- 'http://www.espn.com/nfl/standings/_/season/2013'
webpage <- read_html(url13)
standings13 <- html_nodes(webpage, 'table')
season13a <- html_table(standings13)[[1]]
season13b <- html_table(standings13)[[2]]
season13<-rbind(season13a, season13b)
Winpct13 <- season13[,c("X1","X5")]
colnames(Winpct13) <- c("Team", "Winpct")
Winpct13$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct13$Team)
Winpct13$Team[Winpct13$Team =="Francisco"] <- "49ers"
url14 <- 'http://www.espn.com/nfl/standings/_/season/2014'
webpage <- read_html(url14)
standings14 <- html_nodes(webpage, 'table')
season14a <- html_table(standings14)[[1]]
season14b <- html_table(standings14)[[2]]
season14<-rbind(season14a, season14b)
Winpct14 <- season14[,c("X1","X5")]
colnames(Winpct14) <- c("Team", "Winpct")
Winpct14$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct14$Team)
Winpct14$Team[Winpct14$Team =="Francisco"] <- "49ers"
url15 <- 'http://www.espn.com/nfl/standings/_/season/2015'
webpage <- read_html(url15)
standings15 <- html_nodes(webpage, 'table')
season15a <- html_table(standings15)[[1]]
season15b <- html_table(standings15)[[2]]
season15<-rbind(season15a, season15b)
Winpct15 <- season15[,c("X1","X5")]
colnames(Winpct15) <- c("Team", "Winpct")
Winpct15$Team <- sub(".*[A-Za-z]+\\s+([A-Z][a-z]+).*", "\\1", Winpct15$Team)
Winpct15$Team[Winpct15$Team =="Francisco"] <- "49ers"
#2012
v1 <- unique(tr12$Position)
tr12_trim <-Map(function(x,y)
filter(tr12, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows()
tr12_final <-Map(function(x,y)
filter(tr12, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr12DF<-cast(tr12_final, Team~Position)
#Bears 2012
Bears12<-subset(tr12, Team =="Bears")
Chargers12<-subset(tr12, Team =="Chargers")
#2013
v1 <- unique(tr13$Position)
tr13_trim <-Map(function(x,y)
filter(tr13, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows()
tr13_final <-Map(function(x,y)
filter(tr13, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr13DF<-cast(tr13_final, Team~Position)
#2014
v1 <- unique(tr14$Position)
tr14_trim <-Map(function(x,y)
filter(tr14, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows()
tr14_final <-Map(function(x,y)
filter(tr14, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr14DF<-cast(tr14_final, Team~Position)
#2015
v1 <- unique(tr15$Position)
tr15_trim <-Map(function(x,y)
filter(tr15, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
#2 CB, 2 DT, 2HB, 2MLB, 2WR
bind_rows()
tr15_final <-Map(function(x,y)
filter(tr15, Position==x) %>%
group_by(Team) %>%
top_n(y, wt = Overall), v1, c(1, 2, 2, 1, 1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2)) %>%
bind_rows() %>%
group_by(Team, Position) %>% summarise(Mean = mean(Overall))
tr15DF<-cast(tr15_final, Team~Position)
tr12merge<-merge(Winpct12,tr12DF)
tr13merge<-merge(Winpct13,tr13DF)
tr14merge<-merge(Winpct14,tr14DF)
tr15merge<-merge(Winpct15,tr15DF)
trAll<-rbind(tr12merge, tr13merge, tr14merge, tr15merge)
head(trAll)
tail(trAll)
trAll_CV<-trAll
x <- model.matrix(~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=5) #without specifying nlambda, it is 100 by default
#lambda.max is not given, but easily computed from the input x and y; it is the
#smallest value for lambda such that all the coefficients are zero
#value of lambda that gives minimum mean CV error
cv.lasso$lambda.min
coef(cv.lasso, s = "lambda.min")
trAll_CV<-trAll
x <- model.matrix(~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=10) #without specifying nlambda, it is 100 by default
#lambda.max is not given, but easily computed from the input x and y; it is the
#smallest value for lambda such that all the coefficients are zero
#value of lambda that gives minimum mean CV error
cv.lasso$lambda.min
coef(cv.lasso, s = "lambda.min")
cv.lasso
cv.lasso$lambda.min
trAll_CV<-trAll
x <- model.matrix(~C +CB +DT +FB +FS +HB +K +LE +LG +LOLB +LT +MLB +P +QB +RE +RG +ROLB + RT +SS +TE +WR,trAll_CV)[,-1]
#"-1" to exclude the intercept
xm<-as.matrix(data.frame(x))
y=trAll_CV$Winpct
cv.lasso=cv.glmnet(xm,y, nfolds=5, lambda=.005) #without specifying nlambda, it is 100 by default
page <- html("http://maddenratings.weebly.com/madden-nfl-10.html/")
xls12<- page %>%
html_nodes("a") %>%       # find all links
html_attr("href") %>%     # get the url
str_subset("\\.xlsx") %>% # find those that end in xlsx
.[[1]]
head(xls12)
tail(xls12)
page <- read_html("http://maddenratings.weebly.com/madden-nfl-10.html/")
xls12<- page %>%
html_nodes("a") %>%       # find all links
html_attr("href") %>%     # get the url
str_subset("\\.xlsx") %>% # find those that end in xlsx
.[[2]]
tail(xls12)
head(xls12)
page <- read_html("http://maddenratings.weebly.com/madden-nfl-10.html/")
xls12<- page %>%
html_nodes("a") %>%       # find all links
html_attr("href") %>%     # get the url
str_subset("\\.xlsx") %>% # find those that end in xlsx
;
data.files = list.files()
# Read the first file
df = readWorksheetFromFile(file=data.files[1], sheet=1)
# Loop through the remaining files and merge them to the existing data frame
for (file in data.files[-1]) {
newFile = readWorksheetFromFile(file=file, sheet=1)
df = merge(df, newFile, all=TRUE)
}
library(rJava)
library(XLConnect)
setwd("/home/jerry/Desktop/NFL/madden10")
data.files = list.files()
# Read the first file
df = readWorksheetFromFile(file=data.files[1], sheet=1)
# Loop through the remaining files and merge them to the existing data frame
for (file in data.files[-1]) {
newFile = readWorksheetFromFile(file=file, sheet=1)
df = merge(df, newFile, all=TRUE)
}
library(rJava)
library(XLConnect)
setwd("/home/jerry/Desktop/NFL/madden10")
data.files = list.files()
# Read the first file
df = readWorksheetFromFile(file=data.files[1], sheet=1)
# Loop through the remaining files and merge them to the existing data frame
for (file in data.files[-1]) {
newFile = readWorksheetFromFile(file=file, sheet=1)
df = merge(df, newFile, all=TRUE)}
library(rJava)
library(XLConnect)
library(rJava)
library(XLConnect)
